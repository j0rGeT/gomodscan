package db

import (
	"encoding/json"

	"gomodscan/pkg/types"

	bolt "go.etcd.io/bbolt"
	"golang.org/x/xerrors"
)

const (
	vulnerabilityDetailBucket = "vulnerability-detail"
)

func (dbc Config) PutVulnerabilityDetail(tx *bolt.Tx, cveID string, source types.SourceID, vuln types.VulnerabilityDetail) error {
	if err := dbc.Put(tx, []string{vulnerabilityDetailBucket, cveID}, string(source), vuln); err != nil {
		return xerrors.Errorf("failed to put vulnerability detail: %w", err)
	}
	return nil
}

func (dbc Config) GetVulnerabilityDetail(cveID string) (map[types.SourceID]types.VulnerabilityDetail, error) {
	values, err := dbc.ForEach([]string{vulnerabilityDetailBucket, cveID})
	if err != nil {
		return nil, xerrors.Errorf("error in NVD get: %w", err)
	}
	if len(values) == 0 {
		return nil, nil
	}

	vulns := map[types.SourceID]types.VulnerabilityDetail{}
	for source, value := range values {
		var vuln types.VulnerabilityDetail
		if err = json.Unmarshal(value.Content, &vuln); err != nil {
			return nil, xerrors.Errorf("failed to unmarshal Vulnerability JSON: %w", err)
		}
		vulns[types.SourceID(source)] = vuln
	}
	return vulns, nil
}
